// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: src/github.com/harrizontal/dispatchserver/dispatchsim/simulator.go

package dispatchsim

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
	"time"
)

// MarshalJSON marshal bytes to json - template
func (j *Simulation) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Simulation) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	/* Falling back. type=map[int]*dispatchsim.Environment kind=map */
	buf.WriteString(`{"Environments":`)
	err = buf.Encode(j.Environments)
	if err != nil {
		return err
	}
	/* Falling back. type=map[int]*dispatchsim.DriverAgent kind=map */
	buf.WriteString(`,"DriverAgents":`)
	err = buf.Encode(j.DriverAgents)
	if err != nil {
		return err
	}
	/* Struct fall back. type=sync.RWMutex kind=struct */
	buf.WriteString(`,"DriverAgentMutex":`)
	err = buf.Encode(&j.DriverAgentMutex)
	if err != nil {
		return err
	}
	if j.OM != nil {
		/* Struct fall back. type=dispatchsim.OrderManager kind=struct */
		buf.WriteString(`,"OM":`)
		err = buf.Encode(j.OM)
		if err != nil {
			return err
		}
	} else {
		buf.WriteString(`,"OM":null`)
	}
	if j.RN != nil {
		/* Struct fall back. type=dispatchsim.RoadNetwork kind=struct */
		buf.WriteString(`,"RN":`)
		err = buf.Encode(j.RN)
		if err != nil {
			return err
		}
	} else {
		buf.WriteString(`,"RN":null`)
	}
	buf.WriteString(`,"MasterSpeed":`)
	fflib.FormatBits2(buf, uint64(j.MasterSpeed), 10, j.MasterSpeed < 0)
	buf.WriteString(`,"Recieve":`)
	/* Falling back. type=chan string kind=chan */
	err = buf.Encode(j.Recieve)
	if err != nil {
		return err
	}
	buf.WriteString(`,"Send":`)
	/* Falling back. type=chan string kind=chan */
	err = buf.Encode(j.Send)
	if err != nil {
		return err
	}
	buf.WriteString(`,"OrderQueue":`)
	/* Falling back. type=chan dispatchsim.Order kind=chan */
	err = buf.Encode(j.OrderQueue)
	if err != nil {
		return err
	}
	if j.UpdateMap {
		buf.WriteString(`,"UpdateMap":true`)
	} else {
		buf.WriteString(`,"UpdateMap":false`)
	}
	buf.WriteString(`,"UpdateMapSpeed":`)
	fflib.FormatBits2(buf, uint64(j.UpdateMapSpeed), 10, j.UpdateMapSpeed < 0)
	buf.WriteString(`,"DispatcherSpeed":`)
	fflib.FormatBits2(buf, uint64(j.DispatcherSpeed), 10, j.DispatcherSpeed < 0)
	buf.WriteString(`,"UpdateStatsSpeed":`)
	fflib.FormatBits2(buf, uint64(j.UpdateStatsSpeed), 10, j.UpdateStatsSpeed < 0)
	buf.WriteString(`,"TickerTime":`)
	fflib.FormatBits2(buf, uint64(j.TickerTime), 10, j.TickerTime < 0)
	buf.WriteString(`,"Ticker":`)
	/* Falling back. type=<-chan time.Time kind=chan */
	err = buf.Encode(j.Ticker)
	if err != nil {
		return err
	}
	buf.WriteString(`,"SimulationTime":`)

	{

		obj, err = j.SimulationTime.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	/* Struct fall back. type=dispatchsim.TaskParametersFormat kind=struct */
	buf.WriteString(`,"TaskParameters":`)
	err = buf.Encode(&j.TaskParameters)
	if err != nil {
		return err
	}
	/* Struct fall back. type=dispatchsim.DispatcherParametersFormat kind=struct */
	buf.WriteString(`,"DispatcherParameters":`)
	err = buf.Encode(&j.DispatcherParameters)
	if err != nil {
		return err
	}
	buf.WriteString(`,"StartDrivers":`)
	/* Falling back. type=chan interface {} kind=chan */
	err = buf.Encode(j.StartDrivers)
	if err != nil {
		return err
	}
	buf.WriteString(`,"StartDispatchers":`)
	/* Falling back. type=chan interface {} kind=chan */
	err = buf.Encode(j.StartDispatchers)
	if err != nil {
		return err
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtSimulationbase = iota
	ffjtSimulationnosuchkey

	ffjtSimulationEnvironments

	ffjtSimulationDriverAgents

	ffjtSimulationDriverAgentMutex

	ffjtSimulationOM

	ffjtSimulationRN

	ffjtSimulationMasterSpeed

	ffjtSimulationRecieve

	ffjtSimulationSend

	ffjtSimulationOrderQueue

	ffjtSimulationUpdateMap

	ffjtSimulationUpdateMapSpeed

	ffjtSimulationDispatcherSpeed

	ffjtSimulationUpdateStatsSpeed

	ffjtSimulationTickerTime

	ffjtSimulationTicker

	ffjtSimulationSimulationTime

	ffjtSimulationTaskParameters

	ffjtSimulationDispatcherParameters

	ffjtSimulationStartDrivers

	ffjtSimulationStartDispatchers
)

var ffjKeySimulationEnvironments = []byte("Environments")

var ffjKeySimulationDriverAgents = []byte("DriverAgents")

var ffjKeySimulationDriverAgentMutex = []byte("DriverAgentMutex")

var ffjKeySimulationOM = []byte("OM")

var ffjKeySimulationRN = []byte("RN")

var ffjKeySimulationMasterSpeed = []byte("MasterSpeed")

var ffjKeySimulationRecieve = []byte("Recieve")

var ffjKeySimulationSend = []byte("Send")

var ffjKeySimulationOrderQueue = []byte("OrderQueue")

var ffjKeySimulationUpdateMap = []byte("UpdateMap")

var ffjKeySimulationUpdateMapSpeed = []byte("UpdateMapSpeed")

var ffjKeySimulationDispatcherSpeed = []byte("DispatcherSpeed")

var ffjKeySimulationUpdateStatsSpeed = []byte("UpdateStatsSpeed")

var ffjKeySimulationTickerTime = []byte("TickerTime")

var ffjKeySimulationTicker = []byte("Ticker")

var ffjKeySimulationSimulationTime = []byte("SimulationTime")

var ffjKeySimulationTaskParameters = []byte("TaskParameters")

var ffjKeySimulationDispatcherParameters = []byte("DispatcherParameters")

var ffjKeySimulationStartDrivers = []byte("StartDrivers")

var ffjKeySimulationStartDispatchers = []byte("StartDispatchers")

// UnmarshalJSON umarshall json - template of ffjson
func (j *Simulation) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *Simulation) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtSimulationbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtSimulationnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'D':

					if bytes.Equal(ffjKeySimulationDriverAgents, kn) {
						currentKey = ffjtSimulationDriverAgents
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySimulationDriverAgentMutex, kn) {
						currentKey = ffjtSimulationDriverAgentMutex
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySimulationDispatcherSpeed, kn) {
						currentKey = ffjtSimulationDispatcherSpeed
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySimulationDispatcherParameters, kn) {
						currentKey = ffjtSimulationDispatcherParameters
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'E':

					if bytes.Equal(ffjKeySimulationEnvironments, kn) {
						currentKey = ffjtSimulationEnvironments
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'M':

					if bytes.Equal(ffjKeySimulationMasterSpeed, kn) {
						currentKey = ffjtSimulationMasterSpeed
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'O':

					if bytes.Equal(ffjKeySimulationOM, kn) {
						currentKey = ffjtSimulationOM
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySimulationOrderQueue, kn) {
						currentKey = ffjtSimulationOrderQueue
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'R':

					if bytes.Equal(ffjKeySimulationRN, kn) {
						currentKey = ffjtSimulationRN
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySimulationRecieve, kn) {
						currentKey = ffjtSimulationRecieve
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'S':

					if bytes.Equal(ffjKeySimulationSend, kn) {
						currentKey = ffjtSimulationSend
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySimulationSimulationTime, kn) {
						currentKey = ffjtSimulationSimulationTime
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySimulationStartDrivers, kn) {
						currentKey = ffjtSimulationStartDrivers
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySimulationStartDispatchers, kn) {
						currentKey = ffjtSimulationStartDispatchers
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'T':

					if bytes.Equal(ffjKeySimulationTickerTime, kn) {
						currentKey = ffjtSimulationTickerTime
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySimulationTicker, kn) {
						currentKey = ffjtSimulationTicker
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySimulationTaskParameters, kn) {
						currentKey = ffjtSimulationTaskParameters
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'U':

					if bytes.Equal(ffjKeySimulationUpdateMap, kn) {
						currentKey = ffjtSimulationUpdateMap
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySimulationUpdateMapSpeed, kn) {
						currentKey = ffjtSimulationUpdateMapSpeed
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeySimulationUpdateStatsSpeed, kn) {
						currentKey = ffjtSimulationUpdateStatsSpeed
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeySimulationStartDispatchers, kn) {
					currentKey = ffjtSimulationStartDispatchers
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySimulationStartDrivers, kn) {
					currentKey = ffjtSimulationStartDrivers
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySimulationDispatcherParameters, kn) {
					currentKey = ffjtSimulationDispatcherParameters
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySimulationTaskParameters, kn) {
					currentKey = ffjtSimulationTaskParameters
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySimulationSimulationTime, kn) {
					currentKey = ffjtSimulationSimulationTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySimulationTicker, kn) {
					currentKey = ffjtSimulationTicker
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySimulationTickerTime, kn) {
					currentKey = ffjtSimulationTickerTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySimulationUpdateStatsSpeed, kn) {
					currentKey = ffjtSimulationUpdateStatsSpeed
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySimulationDispatcherSpeed, kn) {
					currentKey = ffjtSimulationDispatcherSpeed
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySimulationUpdateMapSpeed, kn) {
					currentKey = ffjtSimulationUpdateMapSpeed
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeySimulationUpdateMap, kn) {
					currentKey = ffjtSimulationUpdateMap
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeySimulationOrderQueue, kn) {
					currentKey = ffjtSimulationOrderQueue
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySimulationSend, kn) {
					currentKey = ffjtSimulationSend
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeySimulationRecieve, kn) {
					currentKey = ffjtSimulationRecieve
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySimulationMasterSpeed, kn) {
					currentKey = ffjtSimulationMasterSpeed
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeySimulationRN, kn) {
					currentKey = ffjtSimulationRN
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeySimulationOM, kn) {
					currentKey = ffjtSimulationOM
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeySimulationDriverAgentMutex, kn) {
					currentKey = ffjtSimulationDriverAgentMutex
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySimulationDriverAgents, kn) {
					currentKey = ffjtSimulationDriverAgents
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeySimulationEnvironments, kn) {
					currentKey = ffjtSimulationEnvironments
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtSimulationnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtSimulationEnvironments:
					goto handle_Environments

				case ffjtSimulationDriverAgents:
					goto handle_DriverAgents

				case ffjtSimulationDriverAgentMutex:
					goto handle_DriverAgentMutex

				case ffjtSimulationOM:
					goto handle_OM

				case ffjtSimulationRN:
					goto handle_RN

				case ffjtSimulationMasterSpeed:
					goto handle_MasterSpeed

				case ffjtSimulationRecieve:
					goto handle_Recieve

				case ffjtSimulationSend:
					goto handle_Send

				case ffjtSimulationOrderQueue:
					goto handle_OrderQueue

				case ffjtSimulationUpdateMap:
					goto handle_UpdateMap

				case ffjtSimulationUpdateMapSpeed:
					goto handle_UpdateMapSpeed

				case ffjtSimulationDispatcherSpeed:
					goto handle_DispatcherSpeed

				case ffjtSimulationUpdateStatsSpeed:
					goto handle_UpdateStatsSpeed

				case ffjtSimulationTickerTime:
					goto handle_TickerTime

				case ffjtSimulationTicker:
					goto handle_Ticker

				case ffjtSimulationSimulationTime:
					goto handle_SimulationTime

				case ffjtSimulationTaskParameters:
					goto handle_TaskParameters

				case ffjtSimulationDispatcherParameters:
					goto handle_DispatcherParameters

				case ffjtSimulationStartDrivers:
					goto handle_StartDrivers

				case ffjtSimulationStartDispatchers:
					goto handle_StartDispatchers

				case ffjtSimulationnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Environments:

	/* handler: j.Environments type=map[int]*dispatchsim.Environment kind=map quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_bracket && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Environments = nil
		} else {

			j.Environments = make(map[int]*Environment, 0)

			wantVal := true

			for {

				var k int

				var tmpJEnvironments *Environment

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_bracket {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: k type=int kind=int quoted=false*/

				{
					if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
					}
				}

				{

					if tok == fflib.FFTok_null {

					} else {

						tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

						if err != nil {
							return fs.WrapErr(err)
						}

						k = int(tval)

					}
				}

				// Expect ':' after key
				tok = fs.Scan()
				if tok != fflib.FFTok_colon {
					return fs.WrapErr(fmt.Errorf("wanted colon token, but got token: %v", tok))
				}

				tok = fs.Scan()
				/* handler: tmpJEnvironments type=*dispatchsim.Environment kind=ptr quoted=false*/

				{

					if tok == fflib.FFTok_null {
						tmpJEnvironments = nil
					} else {
						if tmpJEnvironments == nil {
							tmpJEnvironments = new(Environment)
						}

						/* handler: tmpJEnvironments type=dispatchsim.Environment kind=struct quoted=false*/

						{
							/* Falling back. type=dispatchsim.Environment kind=struct */
							tbuf, err := fs.CaptureField(tok)
							if err != nil {
								return fs.WrapErr(err)
							}

							err = json.Unmarshal(tbuf, &tmpJEnvironments)
							if err != nil {
								return fs.WrapErr(err)
							}
						}

					}
				}

				j.Environments[k] = tmpJEnvironments

				wantVal = false
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DriverAgents:

	/* handler: j.DriverAgents type=map[int]*dispatchsim.DriverAgent kind=map quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_bracket && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.DriverAgents = nil
		} else {

			j.DriverAgents = make(map[int]*DriverAgent, 0)

			wantVal := true

			for {

				var k int

				var tmpJDriverAgents *DriverAgent

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_bracket {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: k type=int kind=int quoted=false*/

				{
					if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
					}
				}

				{

					if tok == fflib.FFTok_null {

					} else {

						tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

						if err != nil {
							return fs.WrapErr(err)
						}

						k = int(tval)

					}
				}

				// Expect ':' after key
				tok = fs.Scan()
				if tok != fflib.FFTok_colon {
					return fs.WrapErr(fmt.Errorf("wanted colon token, but got token: %v", tok))
				}

				tok = fs.Scan()
				/* handler: tmpJDriverAgents type=*dispatchsim.DriverAgent kind=ptr quoted=false*/

				{

					if tok == fflib.FFTok_null {
						tmpJDriverAgents = nil
					} else {
						if tmpJDriverAgents == nil {
							tmpJDriverAgents = new(DriverAgent)
						}

						/* handler: tmpJDriverAgents type=dispatchsim.DriverAgent kind=struct quoted=false*/

						{
							/* Falling back. type=dispatchsim.DriverAgent kind=struct */
							tbuf, err := fs.CaptureField(tok)
							if err != nil {
								return fs.WrapErr(err)
							}

							err = json.Unmarshal(tbuf, &tmpJDriverAgents)
							if err != nil {
								return fs.WrapErr(err)
							}
						}

					}
				}

				j.DriverAgents[k] = tmpJDriverAgents

				wantVal = false
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DriverAgentMutex:

	/* handler: j.DriverAgentMutex type=sync.RWMutex kind=struct quoted=false*/

	{
		/* Falling back. type=sync.RWMutex kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.DriverAgentMutex)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OM:

	/* handler: j.OM type=dispatchsim.OrderManager kind=struct quoted=false*/

	{
		/* Falling back. type=dispatchsim.OrderManager kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.OM)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RN:

	/* handler: j.RN type=dispatchsim.RoadNetwork kind=struct quoted=false*/

	{
		/* Falling back. type=dispatchsim.RoadNetwork kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.RN)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MasterSpeed:

	/* handler: j.MasterSpeed type=time.Duration kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for Duration", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.MasterSpeed = time.Duration(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Recieve:

	/* handler: j.Recieve type=chan string kind=chan quoted=false*/

	{
		/* Falling back. type=chan string kind=chan */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Recieve)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Send:

	/* handler: j.Send type=chan string kind=chan quoted=false*/

	{
		/* Falling back. type=chan string kind=chan */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Send)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OrderQueue:

	/* handler: j.OrderQueue type=chan dispatchsim.Order kind=chan quoted=false*/

	{
		/* Falling back. type=chan dispatchsim.Order kind=chan */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.OrderQueue)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UpdateMap:

	/* handler: j.UpdateMap type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				j.UpdateMap = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				j.UpdateMap = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UpdateMapSpeed:

	/* handler: j.UpdateMapSpeed type=time.Duration kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for Duration", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.UpdateMapSpeed = time.Duration(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DispatcherSpeed:

	/* handler: j.DispatcherSpeed type=time.Duration kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for Duration", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.DispatcherSpeed = time.Duration(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UpdateStatsSpeed:

	/* handler: j.UpdateStatsSpeed type=time.Duration kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for Duration", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.UpdateStatsSpeed = time.Duration(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TickerTime:

	/* handler: j.TickerTime type=time.Duration kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for Duration", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.TickerTime = time.Duration(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ticker:

	/* handler: j.Ticker type=<-chan time.Time kind=chan quoted=false*/

	{
		/* Falling back. type=<-chan time.Time kind=chan */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.Ticker)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SimulationTime:

	/* handler: j.SimulationTime type=time.Time kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.SimulationTime.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TaskParameters:

	/* handler: j.TaskParameters type=dispatchsim.TaskParametersFormat kind=struct quoted=false*/

	{
		/* Falling back. type=dispatchsim.TaskParametersFormat kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.TaskParameters)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DispatcherParameters:

	/* handler: j.DispatcherParameters type=dispatchsim.DispatcherParametersFormat kind=struct quoted=false*/

	{
		/* Falling back. type=dispatchsim.DispatcherParametersFormat kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.DispatcherParameters)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_StartDrivers:

	/* handler: j.StartDrivers type=chan interface {} kind=chan quoted=false*/

	{
		/* Falling back. type=chan interface {} kind=chan */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.StartDrivers)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_StartDispatchers:

	/* handler: j.StartDispatchers type=chan interface {} kind=chan quoted=false*/

	{
		/* Falling back. type=chan interface {} kind=chan */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &j.StartDispatchers)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
